
<%
columns = [{
    label: "Controller"
}, {
    label: "List"
}, {
    label: "Index"
}, {
    label: "Show"
}, {
    label: "Create"
}, {
    label: "Update"
}, {
    label: "Destroy"
}, {
    label: ""
}]
%>


<style>
.mini-toggle {
    position: relative;
    width: 40px;
    height: 20px;
    background: #ccc;
    border-radius: 9999px;
    border: none;
    cursor: pointer;
    padding: 0;
    transition: background 0.25s ease;
    display: inline-block;
}

.mini-toggle.active {
    background: #22c55e; /* green */
    background: var(--lesli-color-primary)
}

.mini-toggle-slider {
    position: absolute;
    top: 2px;
    left: 2px;
    width: 16px;
    height: 16px;
    background: white;
    border-radius: 50%;
    transition: transform 0.25s ease;
}

.mini-toggle.active .mini-toggle-slider {
    transform: translateX(20px);
}
</style>

<%= render LesliView::Elements::Table.new(:columns => columns) do |table| %>
    <% @role_actions.each do |controller_name, actions| %>
        <% table.with_row do |row| %>
            <% row.with_cell do %>
                <%= controller_name %>
            <% end %>
            <% actions.each do |action_name, action| %>
                <% row.with_cell do %>
                    <% if action %>
                        <%= button_to role_action_path(action),
                            method: :delete,
                            class: "mini-toggle #{action[:active] == 1 ? 'active' : ''}",
                            form: { "x-data" => "toggleForm", "x-on:submit.prevent" => "submit($el)" } do %>
                            <span class="mini-toggle-slider"></span>
                        <% end %>
                    <% end %>
                <% end %>
            <% end %>
        <% end %>
    <% end %>
<% end %>
<script>
    document.addEventListener('alpine:init', () => {
        Alpine.data('toggleForm', () => ({
            submit(form) {
                const method = form.querySelector('input[name="_method"]')?.value?.toUpperCase() || form.method.toUpperCase();
                fetch(form.action, {
                    method: method,
                    headers: {
                        'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]').content,
                        'Accept': 'text/vnd.turbo-stream.html' // or 'application/json'
                    },
                    body: new URLSearchParams(new FormData(form))
                }).then(response => {
                    if (!response.ok) throw new Error("Request failed");
                    return response.text();
                }).then(() => {
                    // Success! Toggle the class
                    form.querySelector('button')?.classList.toggle('active');
                }).catch(err => {
                    console.error("Error:", err);
                    alert("Something went wrong");
                });
            }
        }))
    });
</script>
